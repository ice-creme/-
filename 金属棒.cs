//
// File generated by HDevelop for HALCON/.NET (C#) Version 17.12
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop 
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    if (HalconAPI.isWindows)
      HOperatorSet.SetSystem("use_window_thread","true");
    action();
  }
#endif

#if !NO_EXPORT_MAIN
  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    HObject ho_Image3mm, ho_Image, ho_Image5mm;
    HObject ho_Image2;

    // Local control variables 

    HTuple hv_WindowHandle = null, hv_AmplitudeThreshold = null;
    HTuple hv_RoiWidthLen2 = null, hv_LineRowStart_Measure_04_0 = null;
    HTuple hv_LineColumnStart_Measure_04_0 = null, hv_LineRowEnd_Measure_04_0 = null;
    HTuple hv_LineColumnEnd_Measure_04_0 = null, hv_TmpCtrl_Row = null;
    HTuple hv_TmpCtrl_Column = null, hv_TmpCtrl_Dr = null;
    HTuple hv_TmpCtrl_Dc = null, hv_TmpCtrl_Phi = null, hv_TmpCtrl_Len1 = null;
    HTuple hv_TmpCtrl_Len2 = null, hv_MsrHandle_Measure_04_0 = null;
    HTuple hv_Row_Measure_04_0 = null, hv_Column_Measure_04_0 = null;
    HTuple hv_Amplitude_Measure_04_0 = null, hv_Distance_Measure_04_0 = null;
    HTuple hv_dist = null, hv_LineRowStart_Measure_01_0 = null;
    HTuple hv_LineColumnStart_Measure_01_0 = null, hv_LineRowEnd_Measure_01_0 = null;
    HTuple hv_LineColumnEnd_Measure_01_0 = null, hv_MsrHandle_Measure_01_0 = null;
    HTuple hv_Row_Measure_01_0 = null, hv_Column_Measure_01_0 = null;
    HTuple hv_Amplitude_Measure_01_0 = null, hv_Distance_Measure_01_0 = null;
    HTuple hv_dist1 = null;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image3mm);
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_Image5mm);
    HOperatorSet.GenEmptyObj(out ho_Image2);
    //111
    ho_Image3mm.Dispose();
    HOperatorSet.ReadImage(out ho_Image3mm, "C:/Users/夏目家的猫/Desktop/3mm.JPG");
    HOperatorSet.SetWindowAttr("background_color","black");
    HOperatorSet.OpenWindow(0,0,512,512,0,"visible","",out hv_WindowHandle);
    HDevWindowStack.Push(hv_WindowHandle);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.SetPart(HDevWindowStack.GetActive(), 0, 0, 511, 511);
    }
    //测量
    //Measure 04: Code generated by Measure 04
    //Measure 04: Prepare measurement
    hv_AmplitudeThreshold = 40;
    hv_RoiWidthLen2 = 5;
    HOperatorSet.SetSystem("int_zooming", "true");
    //Measure 04: Coordinates for line Measure 04 [0]
    hv_LineRowStart_Measure_04_0 = 444.35;
    hv_LineColumnStart_Measure_04_0 = 576.965;
    hv_LineRowEnd_Measure_04_0 = 444.35;
    hv_LineColumnEnd_Measure_04_0 = 774.224;
    //Measure 04: Convert coordinates to rectangle2 type
    hv_TmpCtrl_Row = 0.5*(hv_LineRowStart_Measure_04_0+hv_LineRowEnd_Measure_04_0);
    hv_TmpCtrl_Column = 0.5*(hv_LineColumnStart_Measure_04_0+hv_LineColumnEnd_Measure_04_0);
    hv_TmpCtrl_Dr = hv_LineRowStart_Measure_04_0-hv_LineRowEnd_Measure_04_0;
    hv_TmpCtrl_Dc = hv_LineColumnEnd_Measure_04_0-hv_LineColumnStart_Measure_04_0;
    hv_TmpCtrl_Phi = hv_TmpCtrl_Dr.TupleAtan2(hv_TmpCtrl_Dc);
    hv_TmpCtrl_Len1 = 0.5*((((hv_TmpCtrl_Dr*hv_TmpCtrl_Dr)+(hv_TmpCtrl_Dc*hv_TmpCtrl_Dc))).TupleSqrt()
        );
    hv_TmpCtrl_Len2 = hv_RoiWidthLen2.Clone();
    //Measure 04: Create measure for line Measure 04 [0]
    //Measure 04: Attention: This assumes all images have the same size!
    HOperatorSet.GenMeasureRectangle2(hv_TmpCtrl_Row, hv_TmpCtrl_Column, hv_TmpCtrl_Phi, 
        hv_TmpCtrl_Len1, hv_TmpCtrl_Len2, 1366, 768, "nearest_neighbor", out hv_MsrHandle_Measure_04_0);
    //Measure 04: ***************************************************************
    //Measure 04: * The code which follows is to be executed once / measurement *
    //Measure 04: ***************************************************************
    //Measure 04: The image is assumed to be made available in the
    //Measure 04: variable last displayed in the graphics window
    ho_Image.Dispose();
    HOperatorSet.CopyObj(ho_Image3mm, out ho_Image, 1, 1);
    //Measure 04: Execute measurements
    HOperatorSet.MeasurePos(ho_Image, hv_MsrHandle_Measure_04_0, 1, hv_AmplitudeThreshold, 
        "all", "all", out hv_Row_Measure_04_0, out hv_Column_Measure_04_0, out hv_Amplitude_Measure_04_0, 
        out hv_Distance_Measure_04_0);
    //Measure 04: Do something with the results
    //Measure 04: Clear measure when done
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
    }
    hv_dist = (((hv_Distance_Measure_04_0.TupleSelect(0))+(hv_Distance_Measure_04_0.TupleSelect(
        1)))+(hv_Distance_Measure_04_0.TupleSelect(2)))/3;
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispText(HDevWindowStack.GetActive(), ("金属棒实际尺寸为："+(hv_dist.TupleString(
          ".1f")))+"像素", "image", 20, 20, "black", new HTuple(), new HTuple());
    }
    HOperatorSet.CloseMeasure(hv_MsrHandle_Measure_04_0);
    //222
    ho_Image5mm.Dispose();
    HOperatorSet.ReadImage(out ho_Image5mm, "C:/Users/夏目家的猫/Desktop/5mm.JPG");
    HOperatorSet.SetWindowAttr("background_color","black");
    HOperatorSet.OpenWindow(0,0,512,512,0,"visible","",out hv_WindowHandle);
    HDevWindowStack.Push(hv_WindowHandle);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.SetPart(HDevWindowStack.GetActive(), 0, 0, 511, 511);
    }
    //Measure 01: Code generated by Measure 01
    //Measure 01: Prepare measurement
    hv_AmplitudeThreshold = 40;
    hv_RoiWidthLen2 = 5;
    HOperatorSet.SetSystem("int_zooming", "true");
    //Measure 01: Coordinates for line Measure 01 [0]
    hv_LineRowStart_Measure_01_0 = 440.8;
    hv_LineColumnStart_Measure_01_0 = 556.622;
    hv_LineRowEnd_Measure_01_0 = 441.353;
    hv_LineColumnEnd_Measure_01_0 = 773.242;
    //Measure 01: Convert coordinates to rectangle2 type
    hv_TmpCtrl_Row = 0.5*(hv_LineRowStart_Measure_01_0+hv_LineRowEnd_Measure_01_0);
    hv_TmpCtrl_Column = 0.5*(hv_LineColumnStart_Measure_01_0+hv_LineColumnEnd_Measure_01_0);
    hv_TmpCtrl_Dr = hv_LineRowStart_Measure_01_0-hv_LineRowEnd_Measure_01_0;
    hv_TmpCtrl_Dc = hv_LineColumnEnd_Measure_01_0-hv_LineColumnStart_Measure_01_0;
    hv_TmpCtrl_Phi = hv_TmpCtrl_Dr.TupleAtan2(hv_TmpCtrl_Dc);
    hv_TmpCtrl_Len1 = 0.5*((((hv_TmpCtrl_Dr*hv_TmpCtrl_Dr)+(hv_TmpCtrl_Dc*hv_TmpCtrl_Dc))).TupleSqrt()
        );
    hv_TmpCtrl_Len2 = hv_RoiWidthLen2.Clone();
    //Measure 01: Create measure for line Measure 01 [0]
    //Measure 01: Attention: This assumes all images have the same size!
    HOperatorSet.GenMeasureRectangle2(hv_TmpCtrl_Row, hv_TmpCtrl_Column, hv_TmpCtrl_Phi, 
        hv_TmpCtrl_Len1, hv_TmpCtrl_Len2, 1366, 768, "nearest_neighbor", out hv_MsrHandle_Measure_01_0);
    //Measure 01: ***************************************************************
    //Measure 01: * The code which follows is to be executed once / measurement *
    //Measure 01: ***************************************************************
    //Measure 01: The image is assumed to be made available in the
    //Measure 01: variable last displayed in the graphics window
    ho_Image2.Dispose();
    HOperatorSet.CopyObj(ho_Image5mm, out ho_Image2, 1, 1);
    //Measure 01: Execute measurements
    HOperatorSet.MeasurePos(ho_Image2, hv_MsrHandle_Measure_01_0, 1, hv_AmplitudeThreshold, 
        "all", "all", out hv_Row_Measure_01_0, out hv_Column_Measure_01_0, out hv_Amplitude_Measure_01_0, 
        out hv_Distance_Measure_01_0);
    //Measure 01: Do something with the results
    //Measure 01: Clear measure when done
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_Image2, HDevWindowStack.GetActive());
    }
    hv_dist1 = (((hv_Distance_Measure_01_0.TupleSelect(0))+(hv_Distance_Measure_01_0.TupleSelect(
        1)))+(hv_Distance_Measure_01_0.TupleSelect(2)))*(3/hv_dist);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispText(HDevWindowStack.GetActive(), ("金属棒实际尺寸为："+(hv_dist1.TupleString(
          ".1f")))+"mm", "image", 20, 20, "black", new HTuple(), new HTuple());
    }
    HOperatorSet.CloseMeasure(hv_MsrHandle_Measure_01_0);

    ho_Image3mm.Dispose();
    ho_Image.Dispose();
    ho_Image5mm.Dispose();
    ho_Image2.Dispose();

  }

#endif


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

